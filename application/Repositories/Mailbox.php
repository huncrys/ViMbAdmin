<?php

namespace Repositories;

use Doctrine\ORM\EntityRepository;

/**
 * Mailbox
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Mailbox extends EntityRepository
{
    /**
     * Load mailboxes for admin.
     *
     * If admin is super he gets all mailboxes.
     *
     * @param \Entities\Admin $admin Admin for filtering mailboxes.
     * @return \Entities\Mailboxes[]
     */
    public function loadForAdmin( $admin )
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select( 'm' )
            ->from( '\\Entities\\Mailbox', 'm' );

        if( !$admin->isSuper() )
            $qb->join( 'm.Domain', 'd' )
                ->join( 'd.Admins', 'd2a' )
                ->where( 'd2a.Admin = ?1' )
                ->setParameter( 1, $admin );

        return $qb->getQuery()->getResult();
    }

    /**
     * Load mailboxes for mailbox list .
     *
     * If admin is super he gets all mailboxes.
     *
     * @param \Entities\Admin  $admin  Admin for filtering mailboxes.
     * @param \Entities\Domain $domain Domain for filtering mailboxes.
     * @return array
     */
    public function loadForMailboxList( $admin, $domain = null )
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select( 'm.id as id, m.username as username, m.name as name, m.active as active, m.maildir_size as maildir_size, m.external_id as external_id,
                    m.homedir_size as homedir_size, m.size_at as size_at, m.quota as quota, d.domain as domain, m.delete_pending' )
            ->from( '\\Entities\\Mailbox', 'm' )
            ->where( 'm.delete_pending = FALSE' )
            ->join( 'm.Domain', 'd' );
        
        if( !$admin->isSuper() )
            $qb->join( 'd.Admins', 'd2a' )
                ->andWhere( 'd2a = ?1' )
                ->setParameter( 1, $admin );

        if( $domain )
            $qb->andWhere( 'm.Domain = ?2' )
                ->setParameter( 2, $domain );

        return $qb->getQuery()->getArrayResult();  
    }
    
    /**
     * Return filtered mailboxes data array
     *
     * Use filter to filter mailboxes by username or name or domain. If filter
     * starts with * it will be replaced with % to meet sql requirements. At 
     * the end % will be added to all strings. So filter 'man' will bicome
     * 'man%' and will look for man, manual and iffilter '*man' it wil bicome
     * '%man%' and will look for records like human, humanity, man, manual.
     *
     * @param string           $filter Flter for mailboxes 
     * @param \Entities\Admin  $admin  Admin for filtering mailboxes.
     * @param \Entities\Domain $domain Domain for filtering mailboxes.
     * @return array
     */
    public function filterForMailboxList( $filter, $admin, $domain = null )
    {
        $filter = str_replace ( "'" , "" , $filter );
        
        if( strpos( $filter, "*" ) === 0 )
            $filter = '%' . substr( $filter, 1 );
        
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select( 'm.id as id, m.username as username, m.name as name, m.active as active, m.maildir_size as maildir_size, m.external_id as external_id,
                    m.homedir_size as homedir_size, m.size_at as size_at, m.quota as quota, d.domain as domain, m.delete_pending' )
            ->from( '\\Entities\\Mailbox', 'm' )
            ->join( 'm.Domain', 'd' )
            ->where( "m.delete_pending = FALSE AND ( m.username LIKE '{$filter}%' OR m.name LIKE '{$filter}%' OR d.domain LIKE '{$filter}%' )" );
        
        if( !$admin->isSuper() )
            $qb->join( 'd.Admins', 'd2a' )
                ->andWhere( 'd2a = ?1' )
                ->setParameter( 1, $admin );

        if( $domain )
            $qb->andWhere( 'm.Domain = ?2' )
                ->setParameter( 2, $domain );
                
        return $qb->getQuery()->getArrayResult();  
    }

    /**
     * Load mailboxes usernmae list.
     *
     * If admin is super he gets all mailboxes.
     *
     * @param \Entities\Admin  $admin  Admin for filtering mailboxes.
     * @param \Entities\Domain $domain Domain for filtering mailboxes.
     * @return array
     */
    public function loadUsernameList( $admin, $domain = null )
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select( 'm.id as id , m.username as username' )
            ->from( '\\Entities\\Mailbox', 'm' )
            ->join( 'm.Domain', 'd' );

        if( !$admin->isSuper() )
            $qb->join( 'd.Admins', 'd2a' )
                ->where( 'd2a.Admin = ?1' )
                ->setParameter( 1, $admin );

        if( $domain )
            $qb->andWhere( 'm.Domain = ?2' )
                ->setParameter( 2, $domain );

        $data = $qb->getQuery()->getArrayResult();
        $result = [];
        foreach( $data as $row )
            $result[ $row['id'] ] = $row['username'];
        return $result;
    }


    /**
     * Check if mailbox is unique.
     *
     * Splits given email to local part and domain ant count all mailboxes
     * with these parameters. If count is 0 then function returns true else false.
     *
     * @param string $email Email to check
     * @return bool
     */
    public function isUnique( $email )
    {
        list( $lpart, $domain ) = explode( '@', $email );

        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select( 'count( m.id )' )
            ->from( '\\Entities\\Mailbox', 'm' )
            ->join( 'm.Domain', 'd' )
            ->where( 'm.local_part = ?1' )
            ->andWhere( 'd.domain = ?2' )
            ->setParameter( 1, $lpart )
            ->setParameter( 2, $domain );

        return $qb->getQuery()->getSingleScalarResult() > 0 ? false : true;  
    }

    /**
     * Purges mailbox
     *
     * Remove all mailbox preferences.
     * Remove all mailbox aliases with their preferences and decrease alias count in domain.
     * Remove mailbox entry for multi alias with multi addresses.
     * Remove actual mailbox and decrease mailbox count i domain.
     * Returns false if privileges not allowed and true if removed.
     *
     * @param \Entities\Mailbox $mailbox Mailbox to purge
     * @param \Entities\Admin   $admin   Admin which purging mailbox for privilege validation.
     * @param bool $removeMailbox If true, also remove the Mailbox entity. If false, purge everything but this entity.
     * @return bool
     */
    public function purgeMailbox( $mailbox, $admin, $removeMailbox = true )
    {
        if( !$admin->isSuper() && !$mailbox->getDomain()->getAdmins()->contains( $admin ) )
            return false;

        $aliases = $this->getEntityManager()->getRepository( "\\Entities\\Alias" )->loadForMailbox( $mailbox, $admin, true );
        $inAliases = $this->getEntityManager()->getRepository( "\\Entities\\Alias" )->loadWithMailbox( $mailbox, $admin );

        foreach( $mailbox->getPreferences() as $pref )
            $this->getEntityManager()->remove( $pref );

        //this won't delete the alias entry where address == goto
        foreach( $aliases as $alias )
        {
            $this->_removeAlias( $alias );
        }

        foreach( $inAliases as $alias )
        {
            $gotos = explode( ',', $alias->getGoto() );

            foreach( $gotos as $key => $goto )
            {
                $gotos[ $key ] = $goto = trim( $goto );

                if( ( $goto == $mailbox->getUsername() ) || ( $goto == '' ) )
                    unset( $gotos[ $key ] );
            }

            if( sizeof( $gotos ) == 0 )
                $this->_removeAlias( $alias );
            else
                $alias->setGoto( implode( ',', $gotos ) );
        }
        
        if( $removeMailbox )
            $this->getEntityManager()->remove( $mailbox );
        
        $mailbox->getDomain()->decreaseMailboxCount();

        return true;
    }

    /**
     * Removes alias
     *
     * Removes alias and its preferences also decrease domains alias count
     * if alias goto field is not equal to alias address field.
     *
     * @param /Entities/Alias $alias Alias to remove.
     * @return bool
     */
    private function _removeAlias( $alias )
    {
        foreach( $alias->getPreferences() as $pref )
            $this->getEntityManager()->remove( $pref );

        $this->getEntityManager()->remove( $alias );

        if( $alias->getGoto() != $alias->getAddress() )
            $alias->getDomain()->decreaseAliasCount();
    }

    /**
     * Find all mailboxes pending deletion.
     *
     * @return \Entities\Mailbox[]
     */
    public function pendingDelete()
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select( 'm' )
            ->from( '\\Entities\\Mailbox', 'm' )
            ->where( 'm.delete_pending = TRUE' )
            ->getQuery()
            ->getResult();  
    }

}
